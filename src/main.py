import utils
from models.student import Student
from models.course import Course

def main():
    print("Which major do you want to run stats for?:\n1. CS\n2. MIS\n3. CIT\n4. HI")
    inp = int(input("input number:"))
    if inp == 1: CS()
    elif inp == 2: MIS()
    elif inp == 3: CIT()
    elif inp ==4: HI()
    else:
        print("Invalid input")
def CS():
    # Used https://app.json-generator.com/zT_NwqNKE-l1 to generate the random
    # data. Currently use this template in `students_generator.js`.

    # Step 1: Create the courses
    math098 = Course("MATH-098", 4, "C-")
    math121 = Course("MATH-121", 4, "C-")
    math122 = Course("Math-122", 4, "C-")
    math247 = Course("Math-247", 4, "C-")
    math280 = Course("Math-280", 4, "C-")
    cis115 = Course("CIS-115", 4, "C-")
    cis121 = Course("CIS-121", 4, "C-")
    cis122 = Course("CIS-122", 4, "C-")
    cis223 = Course("CIS-223", 4, "C-")
    cis224 = Course("CIS-224", 4, "C-")

    # Step 2: Create a course sequence. All this is doing is hooking each
    # Course up to one another
    courses = [math098, math121, math122, math247, math280, cis115, cis121, cis122, cis223, cis224]
    Course.create_course_sequence(courses[4:len(courses)])

    cis121.add_prereq(math121)

    # Step 3: Construct a list of students. This is currently loaded in
    # from the students.json file, which is generated by student_generator.py
    # file. It will soon be able to be parameterized to simulate random data
    students = utils.get_list_of_students("../students.json", courses)

    # Step 4: Populate each course with their respective class sizes.
    Course.update_course_sizes(students, courses)

    # Print the current class sizes
    course_printer(courses)

    course_failure_rates(courses)

    # Step 5: Simulate a semester
    for i in range(len(courses) - 1, 0, -1):
        # Update the population here through indexing
        # Switch 0.75 here with the classes failure rate
        print("HERE", courses[i].get_failure_rate(), courses[i].course_name)
        courses[i].course_size = int((1 - courses[i].get_failure_rate()) * courses[i - 1].course_size)

    # Print the current class sizes
    course_printer(courses)

def MIS():
    # Used https://app.json-generator.com/zT_NwqNKE-l1 to generate the random
    # data. Currently use this template in `students_generator.js`.

    # Step 1: Create the courses
    math098 = Course("MATH-098", 4, "C-")
    math121 = Course("MATH-121", 4, "C-")
    cis115 = Course("CIS-115", 4, "C-")
    cis121 = Course("CIS-121", 4, "C-")
    cis122 = Course("CIS-122", 4, "C-")
    cis223 = Course("CIS-223", 4, "C-")

    # Step 2: Create a course sequence. All this is doing is hooking each
    # Course up to one another
    courses = [math098, math121, cis115, cis121, cis122, cis223]
    Course.create_course_sequence(courses[2:len(courses)])

    cis121.add_prereq(math121)

    # Step 3: Construct a list of students. This is currently loaded in
    # from the students.json file, which is generated by student_generator.py
    # file. It will soon be able to be parameterized to simulate random data
    students = utils.get_list_of_students("../students.json", courses)

    # Step 4: Populate each course with their respective class sizes.
    Course.update_course_sizes(students, courses)

    # Print the current class sizes
    course_printer(courses)



    # Step 5: Simulate a semester
    for i in range(len(courses) - 1, 0, -1):
        # Update the population here through indexing
        courses[i].set_failure_rate(.9)
        # Switch 0.75 here with the classes failure rate
        courses[i].course_size = int(courses[i].get_failure_rate() * courses[i - 1].course_size)

    # Print the current class sizes
    course_printer(courses)

def CIT():
    # Used https://app.json-generator.com/zT_NwqNKE-l1 to generate the random
    # data. Currently use this template in `students_generator.js`.

    # Step 1: Create the courses
    math098 = Course("MATH-098", 4, "C-")
    math121 = Course("MATH-121", 4, "C-")  # S1
    cis115 = Course("CIS-115", 4, "C-")
    cis121 = Course("CIS-121", 4, "C-")  # F2
    cis122 = Course("CIS-122", 4, "C-")  # S1
    cis223 = Course("CIS-223", 4, "C-")  # J1
    cis224 = Course("CIS-224", 4, "C-")  # J2

    # Step 2: Create a course sequence. All this is doing is hooking each
    # Course up to one another
    courses = [math098, math121, cis115, cis121, cis122, cis223, cis224]
    Course.create_course_sequence(courses[2:len(courses)])

    cis121.add_prereq(math121)

    # Step 3: Construct a list of students. This is currently loaded in
    # from the students.json file, which is generated by student_generator.py
    # file. It will soon be able to be parameterized to simulate random data
    students = utils.get_list_of_students("../students.json", courses)

    # Step 4: Populate each course with their respective class sizes.
    Course.update_course_sizes(students, courses)

    # Print the current class sizes
    course_printer(courses)


    # Step 5: Simulate a semester
    for i in range(len(courses) - 1, 0, -1):
        # Update the population here through indexing
        courses[i].set_failure_rate(.9)
        # Switch 0.75 here with the classes failure rate
        courses[i].course_size = int((1- courses[i].get_failure_rate()) * courses[i - 1].course_size)

    # Print the current class sizes
    course_printer(courses)

def HI():
    #https://www.mnsu.edu/academics/academic-catalog/undergraduate/health-informatics/health-informatics-bs/#:~:text=The%20Health%20Informatics%20program%20prepares,delivery%2C%20management%2C%20and%20research.

    # Step 1: Create the courses
    math115 = Course("MATH-115", 4, "C-")
    math121 = Course("MATH-121", 4, "C-")
    cis115 = Course("CIS-115", 4, "C-")
    cis121 = Course("CIS-121", 4, "C-")
    cis223 = Course("CIS-223", 4, "C-")


    # Step 2: Create a course sequence. All this is doing is hooking each
    # Course up to one another
    courses = [math115, math121, cis115, cis121, cis223]
    Course.create_course_sequence(courses[2:len(courses)])

    cis121.add_prereq(math121)

    # Step 3: Construct a list of students. This is currently loaded in
    # from the students.json file, which is generated by student_generator.py
    # file. It will soon be able to be parameterized to simulate random data
    students = utils.get_list_of_students("../students.json", courses)

    # Step 4: Populate each course with their respective class sizes.
    Course.update_course_sizes(students, courses)

    # Print the current class sizes
    course_printer(courses)

    courses = course_failure_rates(courses)

    # Step 5: Simulate a semester
    for i in range(len(courses) - 1, 0, -1):
        # Update the population here through indexing
        # Switch 0.75 here with the classes failure rate
        print("HERE", courses[i], courses[i].get_failure_rate())
        courses[i].course_size = int((1 - courses[i].get_failure_rate()) * courses[i - 1].course_size)

    # Print the current class sizes
    course_printer(courses)

def course_failure_rates(courses: list):
    for course in courses:
        print("Set failure rate for {}".format(course.course_name))
        course.set_failure_rate(float(input("Input ratio: ")))
    return courses

def course_printer(courses: list):
    print("==========================")
    for course in courses:
        course.print_course()

if __name__ == "__main__":
    main()
