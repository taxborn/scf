import utils
from models.student import Student
from models.course import Course


def main():
    # Step 1: Create the courses
    math098 = Course("MATH-098", 4, "C-")
    math121 = Course("MATH-121", 4, "C-")
    cis115 = Course("CIS-115", 4, "C-")
    cis121 = Course("CIS-121", 4, "C-")
    cis122 = Course("CIS-122", 4, "C-")
    cis223 = Course("CIS-223", 4, "C-")
    cis224 = Course("CIS-224", 4, "C-")

    # Step 2: Create a course sequence. All this is doing is hooking each
    # Course up to one another
    courses = [math098, math121, cis115, cis121, cis122, cis223, cis224]
    Course.create_course_sequence(courses[2:len(courses)])

    cis121.add_prereq(math121)

    # Step 3: Construct a list of students. This is currently loaded in
    # from the students.json file, which is generated by student_generator.py
    # file. It will soon be able to be parameterized to simulate random data
    students = utils.get_list_of_students("students.json", courses)
    print("found {} students".format(len(students)))

    for student in students:
        print("Student(...{}) took {} courses.".format(
            student.student_id[:5], len(student.course_history)))
        print(
            "--> GPA={:.3f}, DFW={:.3f}\n".format(student.gpa, student.dfw_rate))

    # Step 4: Populate each course with their respective class sizes.
    Course.update_course_sizes(students, courses)

    print("\n")
    # Print the current class sizes
    for course in courses:
        course.print_course()

    # Step 5: Simulate a semester
    print("\nSimulating next semester.\n")
    for i in range(len(courses) - 1, 0, -1):
        # Update the population here through indexing

        # Switch 0.75 here with the classes failure rate
        courses[i].class_size = int(0.75 * courses[i - 1].class_size)

    # Print the current class sizes
    for course in courses:
        course.print_course()


if __name__ == "__main__":
    main()
